local unionObject = script.Parent  -- The union object in the game (single part)
local throwSpeed = 50  -- Speed at which the union is thrown
local damageAmount = 20  -- Damage to apply when the union hits a player
local carryDistance = 5  -- Distance at which the player can carry the union
local isThrown = false  -- Flag to check if the union is thrown
local isCarried = false  -- Flag to check if the union is being carried
local carriedBy = nil  -- Reference to the player carrying the union

-- Function to throw the union
function throwUnion()
    if isCarried and carriedBy then
        -- Apply BodyVelocity to the union object
        local bodyVelocity = Instance.new("BodyVelocity")
        bodyVelocity.MaxForce = Vector3.new(5000, 5000, 5000)  -- Ensure the union is thrown with enough force
        bodyVelocity.Velocity = (carriedBy.Character.HumanoidRootPart.CFrame.LookVector * throwSpeed) -- Throw direction
        bodyVelocity.Parent = unionObject
        
        -- Optionally, remove the velocity after a short time
        game.Debris:AddItem(bodyVelocity, 0.5)  -- Remove BodyVelocity after 0.5 seconds

        -- Set the union as thrown and reset carrying state
        isThrown = true
        isCarried = false
        carriedBy = nil
    end
end

-- Function to detect if a player is close enough to pick up the union
function onProximityDetected(player)
    local character = player.Character
    if not character or isThrown then return end  -- Don't allow carry if the union is thrown

    -- Check if the player is within carrying distance
    local distance = (unionObject.Position - character.HumanoidRootPart.Position).Magnitude
    if distance <= carryDistance then
        -- Allow the player to carry the union
        if not isCarried then
            isCarried = true
            carriedBy = player
            unionObject.CFrame = character.HumanoidRootPart.CFrame * CFrame.new(0, 0, -2)  -- Position the union relative to the player

            -- Disable physics for the union (anchored)
            unionObject.Anchored = true

            print(player.Name .. " is now carrying the union!")
        end
    end
end

-- Function to release the union
function releaseUnion()
    if isCarried and carriedBy then
        -- Release the union
        isCarried = false
        -- Re-enable physics and reset the position of the union in the workspace
        unionObject.Parent = game.Workspace
        unionObject.Anchored = false  -- Re-enable physics
        print(carriedBy.Name .. " released the union.")
    end
end

-- Function to handle union collision with players
function onUnionHit(other)
    if not isThrown then return end  -- Only damage if thrown

    local character = other.Parent
    local humanoid = character:FindFirstChild("Humanoid")
    
    if humanoid then
        -- Apply damage to the player
        humanoid:TakeDamage(damageAmount)

        -- Reset the throw flag after the union hits the player
        isThrown = false
    end
end

-- Function to handle key inputs
game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end

    -- Press "E" to pick up the union or "R" to release it
    if input.KeyCode == Enum.KeyCode.E then
        if not isCarried then
            -- Attempt to carry the union
            local player = game.Players.LocalPlayer
            onProximityDetected(player)
        end
    elseif input.KeyCode == Enum.KeyCode.R then
        -- Release the union
        releaseUnion()
    elseif input.KeyCode == Enum.KeyCode.T then
        -- Throw the union
        throwUnion()
    end
end)

-- Connect the Touched event for collision detection
unionObject.Touched:Connect(onUnionHit)
